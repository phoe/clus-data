### BIG differences, this is a diff between CLUS "Function MACROEXPAND, MACROEXPAND-1" entry
### and CLHS "Function BIT-AND" http://www.lispworks.com/documentation/HyperSpec/Body/f_bt_and.htm
### But should look the same as already checked "cl:functions:bit-and.diff"
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:bit-orc1.txt	2017-04-27 22:05:20.000000000 +0100
+++ saved-pages-clus/cl:functions:bit-orc1.txt	2017-04-27 22:05:20.000000000 +0100
@@ -1,2 +1,1 @@
-Function BIT-AND, BIT-ANDC1, BIT-ANDC2, BIT-EQV, BIT-IOR, BIT-NAND, BIT-NOR, BIT-NOT, BIT-ORC1, BIT-ORC2, BIT-XOR
-Syntax
+Function MACROEXPAND, MACROEXPAND-1

+Syntax

-bit-and bit-array1 bit-array2 &optional opt-arg => resulting-bit-array

-bit-andc1 bit-array1 bit-array2 &optional opt-arg => resulting-bit-array
+ macroexpand form &optional env → expansion, expanded-p

-bit-andc2 bit-array1 bit-array2 &optional opt-arg => resulting-bit-array
+ macroexpand-1 form &optional env → expansion, expanded-p

-bit-eqv bit-array1 bit-array2 &optional opt-arg => resulting-bit-array

-bit-ior bit-array1 bit-array2 &optional opt-arg => resulting-bit-array

-bit-nand bit-array1 bit-array2 &optional opt-arg => resulting-bit-array
+Arguments and Values

-bit-nor bit-array1 bit-array2 &optional opt-arg => resulting-bit-array

-bit-orc1 bit-array1 bit-array2 &optional opt-arg => resulting-bit-array
+ form - a form.

-bit-orc2 bit-array1 bit-array2 &optional opt-arg => resulting-bit-array
+ env - an environment object. The default is nil.

-bit-xor bit-array1 bit-array2 &optional opt-arg => resulting-bit-array
+ expansion - a form.

+ expanded-p - a generalized boolean.

-bit-not bit-array &optional opt-arg => resulting-bit-array

-Arguments and Values

-bit-array, bit-array1, bit-array2 - a bit array.
-Opt-arg - a bit array, or t, or nil. The default is nil.
-Bit-array, bit-array1, bit-array2, and opt-arg (if an array) must all be of the same rank and dimensions.
-resulting-bit-array - a bit array.
 Description

-These functions perform bit-wise logical operations on bit-array1 and bit-array2 and return an array of matching rank and dimensions, such that any given bit of the result is produced by operating on corresponding bits from each of the arguments.
-In the case of bit-not, an array of rank and dimensions matching bit-array is returned that contains a copy of bit-array with all the bits inverted.
-If opt-arg is of type (array bit) the contents of the result are destructively placed into opt-arg. If opt-arg is the symbol t, bit-array or bit-array1 is replaced with the result; if opt-arg is nil or omitted, a new array is created to contain the result.
-The next figure indicates the logical operation performed by each of the functions.
-
-
-Function                                                 Operation
- -  -  - -
-
-bit-and                                                  and
-bit-eqv                                                  equivalence (exclusive nor)
-bit-not                                                  complement
-bit-ior                                                  inclusive or
-bit-xor                                                  exclusive or
-bit-nand                                                 complement of bit-array1 and bit-array2
-bit-nor                                                  complement of bit-array1 or bit-array2
-bit-andc1                                                and complement of bit-array1 with bit-array2
-bit-andc2                                                and bit-array1 with complement of bit-array2
-bit-orc1                                                 or complement of bit-array1 with bit-array2
-bit-orc2                                                 or bit-array1 with complement of bit-array2

-Figure 15-4.  Bit-wise Logical Operations on Bit Arrays
+macroexpand and macroexpand-1 expand macros.
+If form is a macro form, then macroexpand-1 expands the macro form call once.
+macroexpand repeatedly expands form until it is no longer a macro form. In effect, macroexpand calls macroexpand-1 repeatedly until the secondary value it returns is nil.
+If form is a macro form, then the expansion is a macro expansion and expanded-p is true. Otherwise, the expansion is the given form and expanded-p is false.
+Macro expansion is carried out as follows. Once macroexpand-1 has determined that the form is a macro form, it obtains an appropriate expansion function for the macro or symbol macro. The value of *macroexpand-hook* is coerced to a function and then called as a function of three arguments the expansion function, the form, and the env. The value returned from this call is taken to be the expansion of the form.
+In addition to macro definitions in the global environment, any local macro definitions established within env by macrolet or symbol-macrolet are considered. If only form is supplied as an argument, then the environment is effectively null, and only global macro definitions as established by defmacro are considered.
+Macro definitions are shadowed by local function definitions.


 Examples


- (bit-and (setq ba #*11101010) #*01101011) =>  #*01101010
- (bit-and #*1100 #*1010) =>  #*1000
- (bit-andc1 #*1100 #*1010) =>  #*0010
- (setq rba (bit-andc2 ba #*00110011 t)) =>  #*11001000
- (eq rba ba) =>  true
- (bit-not (setq ba #*11101010)) =>  #*00010101
- (setq rba (bit-not ba
-                     (setq tba (make-array 8
-                                           element-type 'bit))))
-=>  #*00010101
- (equal rba tba) =>  true
- (bit-xor #*1100 #*1010) =>  #*0110
+These macros are defined in the three examples below
+;;; Helper macros
+(defmacro expand (form &environment env)
+  (multiple-value-bind (expansion expanded-p) (macroexpand form env)
+    `(values ',expansion ',expanded-p)))
+→
+EXPAND
+(defmacro expand-1 (form &environment env)
+  (multiple-value-bind (expansion expanded-p) (macroexpand-1 form env)
+    `(values ',expansion ',expanded-p)))
+→
+EXPAND-1
+;;; Sample macros
+(defmacro alpha (x y) `(beta ,x ,y))
+→
+ALPHA
+(defmacro beta (x y) `(gamma ,x ,y))
+→
+BETA
+(defmacro delta (x y) `(gamma ,x ,y))
+→
+DELTA
+Simple examples involving just the global environment
+(macroexpand-1 '(alpha a b))
+→
+(BETA A B)
+true
+(expand-1 (alpha a b))
+→
+(BETA A B)
+true
+(macroexpand '(alpha a b))
+→
+(GAMMA A B)
+ true
+(expand (alpha a b))
+→
+(GAMMA A B)
+true
+(macroexpand-1 'not-a-macro)
+→
+NOT-A-MACRO
+false
+(expand-1 not-a-macro)
+→
+NOT-A-MACRO
+false
+(macroexpand '(not-a-macro a b))
+→
+(NOT-A-MACRO A B)
+false
+(expand (not-a-macro a b))
+→
+(NOT-A-MACRO A B)
+false
+Examples involving lexical environments

-<TT>
-Affected By None.

-Exceptional Situations None.
+(macrolet ((alpha (x y) `(delta ,x ,y)))
+  (macroexpand-1 '(alpha a b)))
+→
+(BETA A B)
+true
+(macrolet ((alpha (x y) `(delta ,x ,y)))
+  (expand-1 (alpha a b)))
+→
+(DELTA A B)
+true
+(macrolet ((alpha (x y) `(delta ,x ,y)))
+  (macroexpand '(alpha a b)))
+→
+(GAMMA A B)
+true
+(macrolet ((alpha (x y) `(delta ,x ,y)))
+  (expand (alpha a b)))
+→
+(GAMMA A B)
+true
+(macrolet ((beta (x y) `(epsilon ,x ,y)))
+  (expand (alpha a b)))
+→
+(EPSILON A B)
+true
+(let ((x (list 1 2 3)))
+  (symbol-macrolet ((a (first x)))
+    (expand a)))
+→
+(FIRST X)
+true
+(let ((x (list 1 2 3)))
+  (symbol-macrolet ((a (first x)))
+    (macroexpand 'a)))
+→
+A
+false
+(symbol-macrolet ((b (alpha x y)))
+  (expand-1 b))
+→
+(ALPHA X Y)
+true
+(symbol-macrolet ((b (alpha x y)))
+  (expand b))
+→
+(GAMMA X Y)
+true
+(symbol-macrolet ((b (alpha x y)) (a b))
+  (expand-1 a))
+→
+B
+true
+(symbol-macrolet ((b (alpha x y)) (a b))
+  (expand a))
+→
+(GAMMA X Y)
+true
+Examples of shadowing behavior
+(flet ((beta (x y) (+ x y)))
+  (expand (alpha a b)))
+→
+(BETA A B)
+true
+(macrolet ((alpha (x y) `(delta ,x ,y)))
+  (flet ((alpha (x y) (+ x y)))
+    (expand (alpha a b))))
+→
+(ALPHA A B)
+false
+(let ((x (list 1 2 3)))
+  (symbol-macrolet ((a (first x)))
+    (let ((a x))
+      (expand a))))
+→
+A
+false
+Affected By
+defmacro, setf of macro-function, macrolet, symbol-macrolet
+Exceptional Situations
+None.

 See Also

-lognot, logand
-Notes None.
\ No newline at end of file
+Variable *MACROEXPAND-HOOK*, Macro DEFMACRO, Macro SETF of Macro MACRO-FUNCTION, Special Operator MACROLET, Special Operator SYMBOL-MACROLET, {\secref\Evaluation}
+Notes
+Neither macroexpand nor macroexpand-1 makes any explicit attempt to expand macro forms that are either subforms of the form or subforms of the expansion. Such expansion might occur implicitly, however, due to the semantics or implementation of the macro function.
+\
\ No newline at end of file
