### Some changes
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:typep.txt	2017-04-27 21:40:12.000000000 +0100
+++ saved-pages-clus/cl:functions:typep.txt	2017-04-27 21:40:12.000000000 +0100
@@ -3,7 +4,7 @@
 Syntax


-typep object type-specifier &optional environment => generalized-boolean
+ typep object type-specifier &optional environment → generalized-boolean

 Arguments and Values

@@ -7,19 +10,15 @@

 Arguments and Values

 object - an object.
-type-specifier - any type specifier except values, or a type specifier list whose first element is either function or values.
+ type-specifier - any type specifier, except values or a type specifier list starting with either function or values.
### CLHS "whose first element is either function" CLUS "starting with either function"
 environment - an environment object. The default is nil, denoting the null lexical environment and the and current global environment.
 generalized-boolean - a generalized boolean.
 Description

 Returns true if object is of the type specified by type-specifier; otherwise, returns false.
 A type-specifier of the form (satisfies fn) is handled by applying the function fn to object.
- (typep object '(array type-specifier)), where type-specifier is not *, returns true if and only if object is an array that could be the result of supplying type-specifier as the element-type argument to make-array. (array *) refers to all arrays regardless of element type, while (array type-specifier) refers only to those arrays that can result from giving type-specifier as the element-type argument to make-array. A similar interpretation applies to (simple-array type-specifier) and (vector type-specifier). See Section 15.1.2.1 (Array Upgrading).
-(typep object '(complex type-specifier)) returns true for all complex numbers that can result from giving numbers of type type-specifier to the function complex, plus all other complex numbers of the same specialized representation. Both the real and the imaginary parts of any such complex number must satisfy

- (typep realpart 'type-specifier)
- (typep imagpart 'type-specifier)

-<TT>
-See the function upgraded-complex-part-type.
+(typep object '(array type-specifier)), where type-specifier is not *, returns true if and only if object is an array that could be the result of supplying type-specifier as the element-type argument to make-array. (array *) refers to all arrays regardless of element type, while (array type-specifier) refers only to those arrays that can result from giving type-specifier as the element-type argument to make-array. A similar interpretation applies to (simple-array type-specifier) and (vector type-specifier). see section {\secref\ArrayUpgrading}.
### CLHS "Section 15.1.2.1 (Array Upgrading)" CLUS "{\secref\ArrayUpgrading}"
+(typep object '(complex type-specifier)) returns true for all complex numbers that can result from giving numbers of type type-specifier to the function complex, plus all other complex numbers of the same specialized representation. Both the real and the imaginary parts of any such complex number must satisfy (typep realpart 'type-specifier) and (typep imagpart 'type-specifier); see the function upgraded-complex-part-type.
### CLHS "- (typep realpart 'type-specifier)
### (typep imagpart 'type-specifier)
### (typep imagpart 'type-specifier)
### See the function upgraded-complex-part-type."
### CLUS "(typep realpart 'type-specifier) and (typep imagpart 'type-specifier); see the function upgraded-complex-part-type"

 Examples


- (typep 12 'integer) =>  true
- (typep (1+ most-positive-fixnum) 'fixnum) =>  false
- (typep nil t) =>  true
- (typep nil nil) =>  false
- (typep 1 '(mod 2)) =>  true
- (typep #c(1 1) '(complex (eql 1))) =>  true
-;; To understand this next example, you might need to refer to
-;; Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals).
- (typep #c(0 0) '(complex (eql 0))) =>  false

-<TT>
- Let Ax and Ay be two type specifiers that denote different types, but for which
+(typep 12 'integer)
+→
+true
+(typep (1+ most-positive-fixnum) 'fixnum)
+→
+false
+(typep nil t)
+→
+true
+(typep nil nil)
+→
+false
+(typep 1 '(mod 2))
+→
+true
+(typep #c(1 1) '(complex (eql 1)))
+→
+true

- (upgraded-array-element-type 'Ax)

-<TT> and
+To understand this next example, you might need to refer to \secref\RuleOfCanonRepForComplexRationals.

- (upgraded-array-element-type 'Ay)

-<TT> denote the same type. Notice that

- (typep (make-array 0 element-type 'Ax) '(array Ax)) =>  true
- (typep (make-array 0 element-type 'Ay) '(array Ay)) =>  true
- (typep (make-array 0 element-type 'Ax) '(array Ay)) =>  true
- (typep (make-array 0 element-type 'Ay) '(array Ax)) =>  true
+(typep #c(0 0) '(complex (eql 0)))

-<TT>
+→
+false
+Let Ax and Ay be two type specifiers that denote different types, but for which (upgraded-array-element-type 'Ax) and (upgraded-array-element-type 'Ay) denote the same type. Notice that
+(typep (make-array 0 element-type 'Ax) '(array Ax))
+→
+true
+(typep (make-array 0 element-type 'Ay) '(array Ay))
+→
+true
+(typep (make-array 0 element-type 'Ax) '(array Ay))
+→
+true
+(typep (make-array 0 element-type 'Ay) '(array Ax))
+→
+true
+Affected By
+None.

-Affected By None.

 Exceptional Situations

@@ -59,11 +144,12 @@

 Exceptional Situations

 An error of type error is signaled if type-specifier is values, or a type specifier list whose first element is either function or values.
 The consequences are undefined if the type-specifier is not a type specifier.
 See Also

-type-of, upgraded-array-element-type, upgraded-complex-part-type, Section 4.2.3 (Type Specifiers)
-Notes
### type-of, upgraded-array-element-type, upgraded-complex-part-type, Section 4.2.3 (Type Specifiers) {\secref\TypeSpecifiers}

-Implementations are encouraged to recognize and optimize the case of (typep x (the class y)), since it does not involve any need for expansion of deftype information at runtime.
### Text above move to "Notes" in CLUS
+ Function TYPE-OF
+ Function UPGRADED-ARRAY-ELEMENT-TYPE
+ Function UPGRADED-COMPLEX-PART-TYPE
+ {\secref\TypeSpecifiers}



-<TT>
+Notes
+Implementations are encouraged to recognize and optimize the case of (typep x (the class y)), since it does not involve any need for expansion of deftype information at runtime.

-The following X3J13 cleanup issues, not part of the specification, apply to this section ARRAY-TYPE-ELEMENT-TYPE-SEMANTICSUNIFY-UPGRADING FUNCTION-TYPE SUBTYPEP-ENVIRONMENTADD-ARG
\ No newline at end of file
+\
\ No newline at end of file
