### Some changes
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:delete-package.txt	2017-04-27 21:48:16.000000000 +0100
+++ saved-pages-clus/cl:functions:delete-package.txt	2017-04-27 21:48:16.000000000 +0100
@@ -3,1 +4,1 @@
 Syntax


-delete-package package => generalized-boolean
+ delete-package package → generalized-boolean

 Arguments and Values

@@ -7,11 +10,15 @@

 Arguments and Values

  package - a package designator.
 generalized-boolean - a generalized boolean.
 Description

-delete-package deletes package from all package system data structures. If the operation is successful, delete-package returns true, otherwise nil. The effect of delete-package is that the name and nicknames of package cease to be recognized package names. The package object is still a package (i.e., packagep is true of it) but package-name returns nil. The consequences of deleting the COMMON-LISP package or the KEYWORD package are undefined. The consequences of invoking any other package operation on package once it has been deleted are unspecified. In particular, the consequences of invoking find-symbol, intern and other functions that look for a symbol name in a package are unspecified if they are called with *package* bound to the deleted package or with the deleted package as an argument.
+delete-package deletes package from all package system data structures.
+If the operation is successful, delete-package returns true, otherwise nil.
+The effect of delete-package is that the name and nicknames of package cease to be recognized package names. The package object is still a package (i.e. packagep is true of it) but package-name returns nil.
+The consequences of deleting the common-lisp package or the keyword package are undefined.
+The consequences of invoking any other package operation on package once it has been deleted are unspecified. In particular, the consequences of invoking find-symbol, intern and other functions that look for a symbol name in a package are unspecified if they are called with *package* bound to the deleted package or with the deleted package as an argument.
### CLHS "i.e.," CLUS "i.e."
### CLHS "COMMON-LISP" CLUS "common-lisp"
 If package is a package object that has already been deleted, delete-package immediately returns nil.
 After this operation completes, the home package of any symbol whose home package had previously been package is implementation-dependent. Except for this, symbols accessible in package are not modified in any other way; symbols whose home package is not package remain unchanged.
 Examples


@@ -17,81 +44,401 @@
 Examples


- (setq *foo-package* (make-package "FOO" use nil))
- (setq *foo-symbol*  (intern "FOO" *foo-package*))
+(defparameter *foo-package* (make-package "FOO" use nil))
+→
+*FOO-PACKAGE*
+(defparameter *foo-symbol* (intern "FOO" *foo-package*))
+→
+*FOO-SYMBOL*
  (export *foo-symbol* *foo-package*)

- (setq *bar-package* (make-package "BAR" use '("FOO")))
- (setq *bar-symbol*  (intern "BAR" *bar-package*))
+→
+T
+(defparameter *bar-package* (make-package "BAR" use '("FOO")))
+→
+*FOO-PACKAGE*
+(defparameter *bar-symbol* (intern "BAR" *bar-package*))
+→
+*BAR-PACKAGE*
  (export *foo-symbol* *bar-package*)
+→
+T
  (export *bar-symbol* *bar-package*)

- (setq *baz-package* (make-package "BAZ" use '("BAR")))
+→
+T
+(defparameter *baz-package* (make-package "BAZ" use '("BAR")))
+→
+*BAZ-PACKAGE*
+(symbol-package *foo-symbol*)
+→
+#<PACKAGE "FOO">
+(symbol-package *bar-symbol*)
+→
+#<PACKAGE "BAR">
+(prin1-to-string *foo-symbol*)
+→
+"FOOFOO"
+(prin1-to-string *bar-symbol*)
+→
+"BARBAR"
+(find-symbol "FOO" *bar-package*)
+→
+FOOFOO
+EXTERNAL
+(find-symbol "FOO" *baz-package*)
+→
+FOOFOO
+INHERITED
+(find-symbol "BAR" *baz-package*)
+→
+BARBAR
+INHERITED
+(packagep *foo-package*)
+→
+true
+(packagep *bar-package*)
+→
+true
+(packagep *baz-package*)
+→
+true
+(package-name *foo-package*)
+→
+"FOO"
+(package-name *bar-package*)
+→
+"BAR"
+(package-name *baz-package*)
+→
+"BAZ"
+(package-use-list *foo-package*)
+→
+()
+(package-use-list *bar-package*)

- (symbol-package *foo-symbol*) =>  #<PACKAGE "FOO">
- (symbol-package *bar-symbol*) =>  #<PACKAGE "BAR">
+→

- (prin1-to-string *foo-symbol*) =>  "FOOFOO"
- (prin1-to-string *bar-symbol*) =>  "BARBAR"
+(#<PACKAGE "FOO">)

- (find-symbol "FOO" *bar-package*) =>  FOOFOO, EXTERNAL

- (find-symbol "FOO" *baz-package*) =>  FOOFOO, INHERITED
- (find-symbol "BAR" *baz-package*) =>  BARBAR, INHERITED

- (packagep *foo-package*) =>  true
- (packagep *bar-package*) =>  true
- (packagep *baz-package*) =>  true
+(package-use-list *baz-package*)

- (package-name *foo-package*) =>  "FOO"
- (package-name *bar-package*) =>  "BAR"
- (package-name *baz-package*) =>  "BAZ"
+→
+(#<PACKAGE "BAR">)
+(package-used-by-list *foo-package*)
+→
+(#<PACKAGE "BAR">)
+(package-used-by-list *bar-package*)
+→
+(#<PACKAGE "BAZ">)
+(package-used-by-list *baz-package*)
+→
+()

- (package-use-list *foo-package*) =>  ()
- (package-use-list *bar-package*) =>  (#<PACKAGE "FOO">)
- (package-use-list *baz-package*) =>  (#<PACKAGE "BAR">)

- (package-used-by-list *foo-package*) =>  (#<PACKAGE "BAR">)
- (package-used-by-list *bar-package*) =>  (#<PACKAGE "BAZ">)
- (package-used-by-list *baz-package*) =>  ()

  (delete-package *bar-package*)
->>  Error Package BAZ uses package BAR.
->>  If continued, BAZ will be made to unuse-package BAR,
->>  and then BAR will be deleted.
->>  Type CONTINUE to continue.
->>  Debug> CONTINUE
-=>  T
- (symbol-package *foo-symbol*) =>  #<PACKAGE "FOO">
- (symbol-package *bar-symbol*) is unspecified
- (prin1-to-string *foo-symbol*) =>  "FOOFOO"
- (prin1-to-string *bar-symbol*) is unspecified
- (find-symbol "FOO" *bar-package*) is unspecified
- (find-symbol "FOO" *baz-package*) =>  NIL, NIL
- (find-symbol "BAR" *baz-package*) =>  NIL, NIL
- (packagep *foo-package*) =>  T
- (packagep *bar-package*) =>  T
- (packagep *baz-package*) =>  T
- (package-name *foo-package*) =>  "FOO"
- (package-name *bar-package*) =>  NIL
- (package-name *baz-package*) =>  "BAZ"
- (package-use-list *foo-package*) =>  ()
- (package-use-list *bar-package*) is unspecified
- (package-use-list *baz-package*) =>  ()
- (package-used-by-list *foo-package*) =>  ()
- (package-used-by-list *bar-package*) is unspecified
- (package-used-by-list *baz-package*) =>  ()

-<TT>
-Affected By None.
+▷
+Error Package BAZ uses package BAR.
+If continued, BAZ will be made to unuse-package BAR,
+and then BAR will be deleted.
+Type CONTINUE to continue.
+Debug> CONTINUE
+→
+T
+(symbol-package *foo-symbol*)
+→
+#<PACKAGE "FOO">
+(symbol-package *bar-symbol*)
+?
+The return value of the above is unspecified.
+(prin1-to-string *foo-symbol*)
+→
+"FOOFOO"
+(prin1-to-string *bar-symbol*)
+?
+The return value of the above is unspecified.
+(find-symbol "FOO" *bar-package*)
+?
+The return value of the above is unspecified.
+(find-symbol "FOO" *baz-package*)
+→
+NIL
+NIL
+(find-symbol "BAR" *baz-package*)
+→
+NIL
+NIL
+(packagep *foo-package*)
+→
+true
+(packagep *bar-package*)
+→
+true
+(packagep *baz-package*)
+→
+true
+(package-name *foo-package*)
+→
+"FOO"
+(package-name *bar-package*)
+→
+NIL
+(package-name *baz-package*)
+→
+"BAZ"
+(package-use-list *foo-package*)
+→
+NIL
+(package-use-list *bar-package*)
+?
+The return value of the above is unspecified.
+(package-use-list *baz-package*)
+→
+NIL
+(package-used-by-list *foo-package*)
+→
+NIL
+(package-used-by-list *bar-package*)
+?
+The return value of the above is unspecified.
+(package-used-by-list *baz-package*)
+→
+NIL
+Affected By
+None.

 Exceptional Situations

@@ -95,12 +442,24 @@

 Exceptional Situations

 If the package designator is a name that does not currently name a package, a correctable error of type package-error is signaled. If correction is attempted, no deletion action is attempted; instead, delete-package immediately returns nil.
 If package is used by other packages, a correctable error of type package-error is signaled. If correction is attempted, unuse-package is effectively called to remove any dependencies, causing package's external symbols to cease being accessible to those packages that use package. delete-package then deletes package just as it would have had there been no packages that used it.
 See Also

-unuse-package
-Notes None.
+ Function UNUSE-PACKAGE
+Notes
+None.


-The following X3J13 cleanup issues, not part of the specification, apply to this section PACKAGE-FUNCTION-CONSISTENCYMORE-PERMISSIVE PACKAGE-DELETIONNEW-FUNCTION
\ No newline at end of file
+\
\ No newline at end of file
