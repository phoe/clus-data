### Same "cl:functions:rassoc-if-not.diff"
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:rassoc.txt	2017-04-27 22:01:39.000000000 +0100
+++ saved-pages-clus/cl:functions:rassoc.txt	2017-04-27 22:01:39.000000000 +0100
@@ -1,14 +1,14 @@
 Function RASSOC, RASSOC-IF, RASSOC-IF-NOT
-Syntax


-rassoc item alist &key key test test-not => entry
+Syntax

+ rassoc item alist &key key test test-not → entry

+ rassoc-if predicate alist &key key → entry

-rassoc-if predicate alist &key key => entry
+ rassoc-if-not predicate alist &key key → entry

-rassoc-if-not predicate alist &key key => entry


 Arguments and Values
@@ -13,18 +14,32 @@

 Arguments and Values

 item - an object.
 alist - an association list.
 predicate - a designator for a function of one argument that returns a generalized boolean.
 test - a designator for a function of two arguments that returns a generalized boolean.
 test-not - a designator for a function of two arguments that returns a generalized boolean.
 key - a designator for a function of one argument, or nil.
 entry - a cons that is an element of the alist, or nil.
 Description

-rassoc, rassoc-if, and rassoc-if-not return the first cons whose cdr satisfies the test. If no such cons is found, nil s returned.
+rassoc, rassoc-if, and rassoc-if-not return the first cons whose cdr satisfies the test. If no such cons is found, nil is returned.

 If nil appears in alist in place of a pair, it is ignored.
 Examples


@@ -28,38 +43,127 @@
 Examples


- (setq alist '((1 . "one") (2 . "two") (3 . 3)))
-=>  ((1 . "one") (2 . "two") (3 . 3))
- (rassoc 3 alist) =>  (3 . 3)
- (rassoc "two" alist) =>  NIL
- (rassoc "two" alist test 'equal) =>  (2 . "two")
- (rassoc 1 alist key #'(lambda (x) (if (numberp x) (/ x 3)))) =>  (3 . 3)
- (rassoc 'a '((a . b) (b . c) (c . a) (z . a))) =>  (C . A)
- (rassoc-if #'stringp alist) =>  (1 . "one")
- (rassoc-if-not #'vectorp alist) =>  (3 . 3)

-<TT>
-Side Effects None.
+(defparameter *alist* '((1 . "one") (2 . "two") (3 . 3)))
+→
+*ALIST*
+(rassoc 3 *alist*)
+→
+(3 . 3)
+(rassoc "two" *alist*)
+→
+NIL
+(rassoc "two" *alist* test #'equal)
+→
+(2 . "two")
+(rassoc 1 *alist* key #'(lambda (x) (if (numberp x) (/ x 3))))
+→
+(3 . 3)
+(rassoc 'a '((a . b) (b . c) (c . a) (z . a)))
+→
+(C . A)
+(rassoc-if #'stringp *alist*)

-Affected By None.
+→
+(1 . "one")
+(rassoc-if-not #'vectorp *alist*)
+→
+(3 . 3)
+Side Effects
+None.
+Affected By
+None.
+Exceptional Situations
+None.

-Exceptional Situations None.

 See Also

-assoc,  Section 3.6 (Traversal Rules and Side Effects)
-Notes

- The test-not parameter is deprecated.
- The function rassoc-if-not is deprecated.
-It is possible to rplaca the result of rassoc, provided that it is not nil, in order to ``update'' alist.
+Function ASSOC, {\secref\TraversalRules}
+Example Implementation
 The expressions

  (rassoc item list test fn)

-<TT> and
+and

  (find item list test fn key #'cdr)

-<TT> are equivalent in meaning, except when the item is nil nd nil appears in place of a pair in the alist. See the function assoc.
-The following X3J13 cleanup issues, not part of the specification, apply to this section TEST-NOT-IF-NOTFLUSH-ALL MAPPING-DESTRUCTIVE-INTERACTIONEXPLICITLY-VAGUE ASSOC-RASSOC-IF-KEY ASSOC-RASSOC-IF-KEYYES
\ No newline at end of file
+are equivalent in meaning, except when the item is nil and nil appears in place of a pair in the alist. See the function assoc.
+Notes
+The test-not parameter is deprecated.
+The function rassoc-if-not is deprecated.
+It is possible to rplaca the result of rassoc, provided that it is not nil, in order to "update" alist.
+\
\ No newline at end of file
