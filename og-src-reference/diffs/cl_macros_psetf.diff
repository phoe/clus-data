### Some changes
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:macros:psetf.txt	2017-04-27 21:55:54.000000000 +0100
+++ saved-pages-clus/cl:macros:psetf.txt	2017-04-27 21:55:54.000000000 +0100
@@ -2,9 +4,11 @@
 Syntax
  
  
-setf {pair}* => result*
+ setf pair* → result*
+ psetf pair* → nil
### "{pair}*" goes to "pair*"
   
-psetf {pair}* => nil
  
 
 pair= place newvalue 
@@ -10,50 +14,157 @@
 pair= place newvalue 
 
  
 Arguments and Values
  
 place - a place. 
 newvalue - a form. 
- results - the multiple values[2] returned by the storing form for the last place, or nil if there are no pairs.  
+ results - the multiple values returned by the storing form for the last place, or nil if there are no pairs.
### CLHS "values[2]" CLUS "values"
 Description
  
 setf changes the value of place to be newvalue. 
-(setf place newvalue) expands into an update form that stores the result of evaluating newvalue into the location referred to by place. Some place forms involve uses of accessors that take optional arguments. Whether those optional arguments are permitted by setf, or what their use is, is up to the setf expander function and is not under the control of setf. The documentation for any function that accepts &optional, &rest, or  ..... key arguments and that claims to be usable with setf must specify how those arguments are treated. 
+(setf place newvalue) expands into an update form that stores the result of evaluating newvalue into the location referred to by place.
+Some place forms involve uses of accessors that take optional arguments. Whether those optional arguments are permitted by setf, or what their use is, is up to the setf expander function and is not under the control of setf. The documentation for any function that accepts &optional, &rest, or &key arguments and that claims to be usable with setf must specify how those arguments are treated.
### CLHS "..... key" CLUS "&key"
 If more than one pair is supplied, the pairs are processed sequentially; that is, 
 
- (setf place-1 newvalue-1
-       place-2 newvalue-2
-       ...
-       place-N newvalue-N)
 
-<TT> is precisely equivalent to 
 
- (progn (setf place-1 newvalue-1)
+(setf place-1 newvalue-1 place-2 newvalue-2 ... place-N newvalue-N)
+is precisely equivalent to
+(progn
+  (setf place-1 newvalue-1) 
         (setf place-2 newvalue-2)
         ...
         (setf place-N newvalue-N))
 
-<TT> For psetf, if more than one pair is supplied then the assignments of new values to places are done in parallel. More precisely, all subforms (in both the place and newvalue forms) that are to be evaluated are evaluated from left to right; after all evaluations have been performed, all of the assignments are performed in an unpredictable order. 
-For detailed treatment of the expansion of setf and psetf, see Section 5.1.2 (Kinds of Places). 
+For psetf, if more than one pair is supplied then the assignments of new values to places are done in parallel. More precisely, all subforms (in both the place and newvalue forms) that are to be evaluated are evaluated from left to right; after all evaluations have been performed, all of the assignments are performed in an unpredictable order.
+For detailed treatment of the expansion of setf and psetf, see section {\secref\KindsOfPlaces}.
### Section 5.1.2 (Kinds of Places) {\secref\KindsOfPlaces}
 Examples
  
 
- (setq x (cons 'a 'b) y (list 1 2 3)) =>  (1 2 3) 
- (setf (car x) 'x (cadr y) (car x) (cdr x) y) =>  (1 X 3) 
- x =>  (X 1 X 3) 
- y =>  (1 X 3) 
- (setq x (cons 'a 'b) y (list 1 2 3)) =>  (1 2 3) 
- (psetf (car x) 'x (cadr y) (car x) (cdr x) y) =>  NIL 
- x =>  (X 1 A 3) 
- y =>  (1 A 3) 
 
-<TT> 
+(defparameter *x* (cons 'a 'b) *y* (list 1 2 3)) 
+→
+(1 2 3) 
+(setf (car *x*) '*x* (cadr *y*) (car *x*) (cdr *x*) *y*) 
+→
+(1 X 3) 
+*x* 
+→
+(X 1 X 3) 
+*y* 
+→
+(1 X 3) 
+(defparameter *x* (cons 'a 'b) *y* (list 1 2 3)) 
+→
+(1 2 3) 
+(psetf (car *x*) '*x* (cadr *y*) (car *x*) (cdr *x*) *y*) 
+→
+NIL 
+*x* 
+→
+(X 1 A 3) 
+*y* 
+→
+(1 A 3)
 Affected By
  
 define-setf-expander, defsetf, *macroexpand-hook* 
-Exceptional Situations None.
+Exceptional Situations
+None.
  
 See Also
  
-define-setf-expander, defsetf, macroexpand-1, rotatef, shiftf, Section 5.1 (Generalized Reference)
-Notes None.
### define-setf-expander, defsetf, macroexpand-1, rotatef, shiftf, Section 5.1 (Generalized Reference) {\secref\GeneralizedReference}
\ No newline at end of file
+ Macro DEFINE-SETF-EXPANDER
+ Macro DEFSETF
+ Function MACROEXPAND-1
+ Macro ROTATEF
+ Macro SHIFTF
+ {\secref\GeneralizedReference}
+Notes
+None.
+\
\ No newline at end of file
