### Some changes
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:parse-integer.txt	2017-04-27 21:50:41.000000000 +0100
+++ saved-pages-clus/cl:functions:parse-integer.txt	2017-04-27 21:50:41.000000000 +0100
@@ -2,7 +4,7 @@
 Syntax


-parse-integer string &key start end radix junk-allowed => integer, pos
+ parse-integer string &key start end radix junk-allowed → integer, pos

 Arguments and Values

@@ -6,18 +10,18 @@

 Arguments and Values

 string - a string.
   start, end - bounding index designators of string. The defaults for start and end are 0 and nil, respectively.
 radix - a radix. The default is 10.
 junk-allowed - a generalized boolean. The default is false.
 integer - an integer or false.
 pos - a bounding index of string.
 Description

 parse-integer parses an integer in the specified radix from the substring of string delimited by start and end.
-parse-integer expects an optional sign (+ or -) followed by a a non-empty sequence of digits to be interpreted in the specified radix. Optional leading and trailing whitespace[1] is ignored.
+parse-integer expects an optional sign (+ or -) followed by a a non-empty sequence of digits to be interpreted in the specified radix. Optional leading and trailing whitespace is ignored.
### CLHS "whitespace[1]" CLUS "whitespace"
 parse-integer does not recognize the syntactic radix-specifier prefixes #O, #B, #X, and #nR, nor does it recognize a trailing decimal point.
-If junk-allowed is false, an error of type parse-error is signaled if substring does not consist entirely of the representation of a signed integer, possibly surrounded on either side by whitespace[1] characters.
+If junk-allowed is false, an error of type parse-error is signaled if substring does not consist entirely of the representation of a signed integer, possibly surrounded on either side by whitespace characters.
### CLHS "whitespace[1]" CLUS "whitespace"
 The first value returned is either the integer that was parsed, or else nil if no syntactically correct integer was seen but junk-allowed was true.
 The second value is either the index into the string of the delimiter that terminated the parse, or the upper bounding index of the substring if the parse terminated at the end of the substring (as is always the case if junk-allowed is false).
 Examples


@@ -23,18 +49,27 @@
 Examples


- (parse-integer "123") =>  123, 3
- (parse-integer "123" start 1 radix 5) =>  13, 3
- (parse-integer "no-integer" junk-allowed t) =>  NIL, 0

-<TT>
-Side Effects None.
+(parse-integer "123")
+→
+123, 3
+(parse-integer "123" start 1 radix 5)
+→
+13, 3
+(parse-integer "no-integer" junk-allowed t)
+→
+NIL, 0
+Side Effects
+None.
+Affected By
+None.

-Affected By None.

 Exceptional Situations

-If junk-allowed is false, an error is signaled if substring does not consist entirely of the representation of an integer, possibly surrounded on either side by whitespace[1] characters.
-See Also None.

-Notes None.
+If junk-allowed is false, an error is signaled if substring does not consist entirely of the representation of an integer, possibly surrounded on either side by whitespace characters.
### CLHS "whitespace[1]" CLUS "whitespace"
+See Also
+None.
+Notes
+None.

-The following X3J13 cleanup issues, not part of the specification, apply to this section RANGE-OF-START-AND-END-PARAMETERSINTEGER-AND-INTEGER-NIL SUBSEQ-OUT-OF-BOUNDS
\ No newline at end of file
+\
\ No newline at end of file
