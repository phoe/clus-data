### Style of CLUS looks bad, checked it again
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:shadow.txt	2017-04-27 21:47:49.000000000 +0100
+++ saved-pages-clus/cl:functions:shadow.txt	2017-04-27 21:47:49.000000000 +0100
@@ -2,51 +4,60 @@
 Syntax


-shadow symbol-names &optional package => t
+ shadow symbol-names &optional package â†’ t
+====Arguments and Values====
+* symbol-names - a designator for a list of symbol name designators.
+* package - a package designator. The default is the current package.
+====Description====
+shadow assures that symbols with names given by symbol-names are present in the package.
+Specifically, package is searched for symbols with the names supplied by symbol-names.
+For each such name, if a corresponding symbol is not present in package (directly, not by inheritance), then a corresponding symbol is created with that name, and inserted into package as an internal symbol. The corresponding symbol, whether pre-existing or newly created, is then added, if not already present, to the shadowing symbols list of package.
+====Examples====
+<blockquote>
+(package-shadowing-symbols (make-package 'temp use '(cl))) <r>NIL </r>
+(find-symbol "CAR" 'temp) <r>CAR
+INHERITED </r>
+(shadow 'car 'temp) <r>T </r>
+(find-symbol "CAR" 'temp) <r>TEMPCAR
+INTERNAL </r>
+(package-shadowing-symbols 'temp) <r>(TEMPCAR)</r>
+</blockquote>
+<blockquote>
+(make-package 'test-1) <r>#<PACKAGE "TEST-1"></r>
+(intern "TEST" (find-package 'test-1)) <r>TEST-1TEST, NIL</r>
+(shadow 'test-1test (find-package 'test-1)) <r>T</r>
+(shadow 'TEST (find-package 'test-1)) <r>T</r>
+(assert (not (null (member 'test-1test
+(package-shadowing-symbols (find-package 'test-1))))))
+<r>NIL</r>
+(make-package 'test-2) <r>#<PACKAGE "TEST-2"></r>
+(intern "TEST" (find-package 'test-2)) <r>TEST-2TEST, NIL</r>
+(export 'test-2test (find-package 'test-2)) <r>T</r>
+(use-package 'test-2 (find-package 'test-1)) <r>T</r>
+</blockquote>
+The use-package call in the above example does not error, because the symbol with name "TEST" is shadowed in the package test-1. Therefore, that symbol is not found via inheritance from package test-2'' and there is no conflict between symbols with the same name.

-Arguments and Values

- symbol-names - a designator for a list of string designators.
- package - a package designator.  The default is the current package.
-Description

-shadow assures that symbols with names given by symbol-names are present in the package.
-Specifically, package is searched for symbols with the names supplied by symbol-names.  For each such name, if a corresponding symbol is not present in package (directly, not by inheritance), then a corresponding symbol is created with that name, and inserted into package as an internal symbol. The corresponding symbol, whether pre-existing or newly created, is then added, if not already present, to the shadowing symbols list of package.
-Examples
+Side Effects


- (package-shadowing-symbols (make-package 'temp)) =>  NIL
- (find-symbol 'car 'temp) =>  CAR, INHERITED
- (shadow 'car 'temp) =>  T
- (find-symbol 'car 'temp) =>  TEMPCAR, INTERNAL
- (package-shadowing-symbols 'temp) =>  (TEMPCAR)
+shadow changes the state of the package system in such a way that the package consistency rules do not hold across the change.

-<TT>

+Affected By

- (make-package 'test-1) =>  #<PACKAGE "TEST-1">
- (intern "TEST" (find-package 'test-1)) =>  TEST-1TEST, NIL
- (shadow 'test-1test (find-package 'test-1)) =>  T
- (shadow 'TEST (find-package 'test-1)) =>  T
- (assert (not (null (member 'test-1test (package-shadowing-symbols
-                                            (find-package 'test-1))))))

- (make-package 'test-2) =>  #<PACKAGE "TEST-2">
- (intern "TEST" (find-package 'test-2)) =>  TEST-2TEST, NIL
- (export 'test-2test (find-package 'test-2)) =>  T
- (use-package 'test-2 (find-package 'test-1))    ;should not error
+Current state of the package system.


-<TT>
-Side Effects
+Exceptional Situations

-shadow changes the state of the package system in such a way that the package consistency rules do not hold across the change.
-Affected By

-Current state of the package system.
-Exceptional Situations None.
+None.

 See Also

-package-shadowing-symbols, Section 11.1 (Package Concepts)
+ Function PACKAGE-SHADOWING-SYMBOLS
+ {\secref\PackageConcepts}
### package-shadowing-symbols, Section 11.1 (Package Concepts) {\secref\PackageConcepts}
 Notes

-If a symbol with a name in symbol-names already exists in package, but by inheritance, the inherited symbol becomes shadowed[3] by a newly created internal symbol.
-The following X3J13 cleanup issues, not part of the specification, apply to this section SHADOW-ALREADY-PRESENT PACKAGE-FUNCTION-CONSISTENCYMORE-PERMISSIVE SHADOW-ALREADY-PRESENTWORKS
\ No newline at end of file
+If a symbol with a name in symbol-names already exists in package, but by inheritance, the inherited symbol becomes shadowed by a newly created internal symbol.
+\
\ No newline at end of file
