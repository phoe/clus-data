### Same "cl:functions:char-downcase.diff"
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:char-upcase.txt	2017-04-27 22:04:05.000000000 +0100
+++ saved-pages-clus/cl:functions:char-upcase.txt	2017-04-27 22:04:05.000000000 +0100
@@ -2,1 +4,1 @@
 Syntax


-char-upcase character => corresponding-character
+ char-upcase character → corresponding-character
+ char-downcase character → corresponding-character

-char-downcase character => corresponding-character

 Arguments and Values

@@ -17,29 +32,98 @@
 Examples


- (char-upcase #\a) =>  #\A
- (char-upcase #\A) =>  #\A
- (char-downcase #\a) =>  #\a
- (char-downcase #\A) =>  #\a
- (char-upcase #\9) =>  #\9
- (char-downcase #\9) =>  #\9
- (char-upcase #\@) =>  #\@
- (char-downcase #\@) =>  #\@
- ;; Note that this next example might run for a very long time in
- ;; some implementations if CHAR-CODE-LIMIT happens to be very large
- ;; for that implementation.
+(char-upcase #\a)
+→
+#\A
+(char-upcase #\A)
+→
+#\A
+(char-downcase #\a)
+→
+#\a
+(char-downcase #\A)
+→
+#\a
+(char-upcase #\9)
+→
+#\9
+(char-downcase #\9)
+→
+#\9
+(char-upcase #\@)
+→
+#\@
+(char-downcase #\@)
+→
+#\@
+Note that this next example might run for a very long time in some implementations if char-code-limit happens to be very large for that implementation.
  (dotimes (code char-code-limit)
    (let ((char (code-char code)))
      (when char
-       (unless (cond ((upper-case-p char) (char= (char-upcase (char-downcase char)) char))
-                     ((lower-case-p char) (char= (char-downcase (char-upcase char)) char))
-                     (t (and (char= (char-upcase (char-downcase char)) char)
+      (unless (cond ((upper-case-p char)
+                     (char= (char-upcase (char-downcase char)) char))
+                    ((lower-case-p char)
+                     (char= (char-downcase (char-upcase char)) char))
+                    (t
+                     (and (char= (char-upcase (char-downcase char)) char)
                              (char= (char-downcase (char-upcase char)) char))))
          (return char)))))
-=>  NIL

-<TT>
-Affected By None.
+→
+NIL ;; TODO fix, does not return NIL on SBCL, ECL or CMUCL
+Affected By
+None.

 Exceptional Situations

@@ -43,11 +127,23 @@

 Exceptional Situations

 Should signal an error of type type-error if character is not a character.
 See Also

-upper-case-p, alpha-char-p, Section 13.1.4.3 (Characters With Case), Section 13.1.10 (Documentation of Implementation-Defined Scripts)
+Function UPPER-CASE-P, Function ALPHA-CHAR-P, {\secref\CharactersWithCase}, {\secref\ImplementationDefinedScripts}
 Notes

 If the corresponding-char is different than character, then both the character and the corresponding-char have case.
 Since char-equal ignores the case of the characters it compares, the corresponding-character is always the same as character under char-equal.
\ No newline at end of file
+\
\ No newline at end of file
