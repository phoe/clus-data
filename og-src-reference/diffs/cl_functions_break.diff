### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:break.txt	2017-04-27 22:01:00.000000000 +0100
+++ saved-pages-clus/cl:functions:break.txt	2017-04-27 22:01:00.000000000 +0100
@@ -2,1 +4,1 @@
 Syntax


-break &optional format-control &rest format-arguments => nil
+ break &optional format-control &rest format-arguments → nil

 Arguments and Values

@@ -16,32 +32,57 @@
 Examples


  (break "You got here with arguments ~S." '(FOO 37 A))
->>  BREAK You got here with these arguments FOO, 37, A.
->>  To continue, type CONTINUE followed by an option number
->>   1 Return from BREAK.
->>   2 Top level.
->>  Debug> CONTINUE 1
->>  Return from BREAK.
-=>  NIL
+✖
+BREAK You got here with these arguments FOO, 37, A.
+To continue, type CONTINUE followed by an option number
+1 Return from BREAK.
+2 Top level.
+Debug> continue 1
+Return from BREAK.
+→
+NIL


-<TT>
 Side Effects

 The debugger is entered.
 Affected By

 *debug-io*.
-Exceptional Situations None.
+Exceptional Situations
+None.

 See Also

-error, invoke-debugger.
+Function ERROR, Function INVOKE-DEBUGGER.
 Notes

-break is used as a way of inserting temporary debugging ``breakpoints'' in a program, not as a way of signaling errors. For this reason, break does not take the continue-format-control argument that cerror takes. This and the lack of any possibility of interception by condition handling are the only program-visible differences between break and cerror.
+break is used as a way of inserting temporary debugging "breakpoints" in a program, not as a way of signaling errors. For this reason, break does not take the continue-format-control argument that cerror takes. This and the lack of any possibility of interception by condition handling are the only program-visible differences between break and cerror.
 The user interface aspects of break and cerror are permitted to vary more widely, in order to accomodate the interface needs of the implementation. For example, it is permissible for a Lisp read-eval-print loop to be entered by break rather than the conventional debugger.
 break could be defined by


@@ -49,10 +91,10 @@
    (with-simple-restart (continue "Return from BREAK.")
      (let ((*debugger-hook* nil))
        (invoke-debugger
-           (make-condition 'simple-condition
-                           format-control format-control
+        (make-condition 'simple-condition format-control format-control
                            format-arguments format-arguments))))
    nil)

-<TT>
-The following X3J13 cleanup issues, not part of the specification, apply to this section DEBUGGER-HOOK-VS-BREAKCLARIFY FORMAT-STRING-ARGUMENTSSPECIFY
\ No newline at end of file
+\
\ No newline at end of file
