### Same "cl:functions:pathname-device.diff"
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:pathname-host.txt	2017-04-27 21:47:06.000000000 +0100
+++ saved-pages-clus/cl:functions:pathname-host.txt	2017-04-27 21:47:06.000000000 +0100
@@ -1,24 +1,22 @@
 Function PATHNAME-HOST, PATHNAME-DEVICE, PATHNAME-DIRECTORY, PATHNAME-NAME, PATHNAME-TYPE, PATHNAME-VERSION
-Syntax
-
-

-pathname-host pathname &key case => host

-pathname-device pathname &key case => device
+Syntax


-pathname-directory pathname &key case => directory
+ pathname-host pathname &key case → host

+ pathname-device pathname &key case → device

-pathname-name pathname &key case => name
+ pathname-directory pathname &key case → directory

+ pathname-name pathname &key case → name

-pathname-type pathname &key case => type
+ pathname-type pathname &key case → type

+ pathname-version pathname → version


-pathname-version pathname => version

 Arguments and Values

@@ -23,95 +20,288 @@

 Arguments and Values

  pathname - a pathname designator.
  case - one of local or common. The default is local.
  host - a valid pathname host.
 device - a valid pathname device.
  directory - a valid pathname directory.
 name - a valid pathname name.
 type - a valid pathname type.
 version - a valid pathname version.

 Description

 These functions return the components of pathname.
 If the pathname designator is a pathname, it represents the name used to open the file. This may be, but is not required to be, the actual name of the file.
- If case is supplied, it is treated as described in Section 19.2.2.1.2 (Case in Pathname Components).
+If case is supplied, it is treated as described in \secref\PathnameComponentCase.
 Examples



- (setq q (make-pathname host "KATHY"
+(defparameter *q*
+  (make-pathname host "KATHY"
                         directory "CHAPMAN"
-                        name "LOGIN" type "COM"))
-=>  #P"KATHY[CHAPMAN]LOGIN.COM"
- (pathname-host q) =>  "KATHY"
- (pathname-name q) =>  "LOGIN"
- (pathname-type q) =>  "COM"
- ;; Because namestrings are used, the results shown in the remaining
- ;; examples are not necessarily the only possible results.  Mappings
- ;; from namestring representation to pathname representation are
- ;; dependent both on the file system involved and on the implementation
- ;; (since there may be several implementations which can manipulate the
- ;; the same file system, and those implementations are not constrained
- ;; to agree on all details). Consult the documentation for each
- ;; implementation for specific information on how namestrings are treated
- ;; that implementation.
+                 name "LOGIN"
+                 type "COM"))
+→
+*Q*
+*q*
+→
+#P"KATHY[CHAPMAN]LOGIN.COM"
+(pathname-host *q*)
+→
+"KATHY"
+(pathname-name *q*)
+→
+"LOGIN"
+(pathname-type *q*)
+→
+"COM"
+Because namestrings are used, the results shown in the remaining examples are not necessarily the only possible results. Mappings from namestring representation to pathname representation are dependent both on the file system involved and on the implementation (since there may be several implementations which can manipulate the the same file system, and those implementations are not constrained to agree on all details). Consult the documentation for each implementation for specific information on how namestrings are treated that implementation.
+VMS

  ;; VMS
- (pathname-directory (parse-namestring "[FOO.*.BAR]BAZ.LSP"))
-=>  (ABSOLUTE "FOO" "BAR")
- (pathname-directory (parse-namestring "[FOO.*.BAR]BAZ.LSP") case common)
-=>  (ABSOLUTE "FOO" "BAR")
+(pathname-directory
+(parse-namestring "[FOO.*.BAR]BAZ.LSP"))
+→
+(ABSOLUTE "FOO" "BAR")
+(pathname-directory
+(parse-namestring "[FOO.*.BAR]BAZ.LSP") case common)
+→
+(ABSOLUTE "FOO" "BAR")

  ;; Unix
- (pathname-directory "foo.l") =>  NIL
- (pathname-device "foo.l") =>  UNSPECIFIC
- (pathname-name "foo.l") =>  "foo"
- (pathname-name "foo.l" case local) =>  "foo"
- (pathname-name "foo.l" case common) =>  "FOO"
- (pathname-type "foo.l") =>  "l"
- (pathname-type "foo.l" case local) =>  "l"
- (pathname-type "foo.l" case common) =>  "L"
- (pathname-type "foo") =>  UNSPECIFIC
- (pathname-type "foo" case common) =>  UNSPECIFIC
- (pathname-type "foo.") =>  ""
- (pathname-type "foo." case common) =>  ""
- (pathname-directory (parse-namestring "/foo/bar/baz.lisp") case local)
-=>  (ABSOLUTE "foo" "bar")
+(pathname-directory "foo.l")
+→
+NIL
+(pathname-device "foo.l")
+→
+UNSPECIFIC
+(pathname-name "foo.l")
+→
+"foo"
+(pathname-name "foo.l" case local)
+→
+"foo"
+(pathname-name "foo.l" case common)
+→
+"FOO"
+(pathname-type "foo.l")
+→
+"l"
+(pathname-type "foo.l" case local)
+→
+"l"
+(pathname-type "foo.l" case common)
+→
+"L"
+(pathname-type "foo")
+→
+UNSPECIFIC
+(pathname-type "foo" case common)
+→
+UNSPECIFIC
+(pathname-type "foo.")
+→
+""
+(pathname-type "foo." case common)
+→
+""
  (pathname-directory (parse-namestring "/foo/bar/baz.lisp") case local)
-=>  (ABSOLUTE "FOO" "BAR")
+→
+(ABSOLUTE "foo" "bar")
+(pathname-directory (parse-namestring "/foo/bar/baz.lisp") case common)
+→
+(ABSOLUTE "FOO" "BAR")
  (pathname-directory (parse-namestring "../baz.lisp"))
-=>  (RELATIVE UP)
+→
+(RELATIVE UP)
  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/BAR/../Mum/baz"))
-=>  (ABSOLUTE "foo" "BAR" UP "Mum")
+→
+(ABSOLUTE "foo" "BAR" UP "Mum")
  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/BAR/../Mum/baz") case common)
-=>  (ABSOLUTE "FOO" "bar" UP "Mum")
+→
+(ABSOLUTE "FOO" "bar" UP "Mum")
  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/*/bar/baz.l"))
-=>  (ABSOLUTE "foo" WILD "bar")
+→
+(ABSOLUTE "foo" WILD "bar")
  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/*/bar/baz.l") case common)
-=>  (ABSOLUTE "FOO" WILD "BAR")

- ;; Symbolics LMFS
- (pathname-directory (parse-namestring ">foo>**>bar>baz.lisp"))
-=>  (ABSOLUTE "foo" WILD-INFERIORS "bar")
- (pathname-directory (parse-namestring ">foo>*>bar>baz.lisp"))
-=>  (ABSOLUTE "foo" WILD "bar")
- (pathname-directory (parse-namestring ">foo>*>bar>baz.lisp") case common)
-=>  (ABSOLUTE "FOO" WILD "BAR")
- (pathname-device (parse-namestring ">foo>baz.lisp")) =>  UNSPECIFIC
+→
+(ABSOLUTE "FOO" WILD "BAR")

-<TT>
-Affected By

-The implementation and the host file system.
-Exceptional Situations

+;; Symbolics LMFS
+(pathname-directory (parse-namestring ">foo>>bar>baz.lisp")) <r>(ABSOLUTE "foo" WILD-INFERIORS "bar") </r>
+(pathname-directory (parse-namestring ">foo>*>bar>baz.lisp")) <r>(ABSOLUTE "foo" WILD "bar") </r>
+(pathname-directory (parse-namestring ">foo>*>bar>baz.lisp") case common) <r>(ABSOLUTE "FOO" WILD "BAR") </r>
+(pathname-device (parse-namestring ">foo>baz.lisp")) <r>UNSPECIFIC</r>
+</blockquote>
+====Affected By====
+The implementation and the host file system.
+====Exceptional Situations====
 Should signal an error of type type-error if its first argument is not a pathname.
-See Also
+====See Also====
+* System Class PATHNAME
+* System Class LOGICAL-PATHNAME**
+ {\secref\FileSystemConcepts}
+ {\secref\PathnamesAsFilenames}
+Notes
+None.

- pathname, logical-pathname, Section 20.1 (File System Concepts),   Section 19.1.2 (Pathnames as Filenames)
-Notes None.

-The following X3J13 cleanup issues, not part of the specification, apply to this section FILE-OPEN-ERRORSIGNAL-FILE-ERROR PATHNAME-LOGICALADD PATHNAME-WILDNEW-FUNCTIONS PATHNAME-SUBDIRECTORY-LISTNEW-REPRESENTATION PATHNAME-UNSPECIFIC-COMPONENTNEW-TOKEN PATHNAME-STREAM PATHNAME-COMPONENT-CASEKEYWORD-ARGUMENT
\ No newline at end of file
+\
\ No newline at end of file
