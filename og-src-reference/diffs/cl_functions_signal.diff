### Formating problem
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:signal.txt	2017-04-27 22:00:35.000000000 +0100
+++ saved-pages-clus/cl:functions:signal.txt	2017-04-27 22:00:35.000000000 +0100
@@ -2,7 +4,7 @@
 Syntax


-signal datum &rest arguments => nil
+ signal datum &rest arguments → nil

 Arguments and Values

@@ -13,21 +24,45 @@
 Examples


  (defun handle-division-conditions (condition)
-   (format t "Considering condition for division condition handling~%")
+  (format t "Considering condition for division condition handling~%"
    (when (and (typep condition 'arithmetic-error)
               (eq '/ (arithmetic-error-operation condition)))
      (invoke-debugger condition)))
-HANDLE-DIVISION-CONDITIONS
+→
+HANDLE-DIVISION-CONDITION
  (defun handle-other-arithmetic-errors (condition)
-   (format t "Considering condition for arithmetic condition handling~%")
-   (when (typep condition 'arithmetic-error)
-     (abort)))
+  (format t "Considering condition for arithmetic condition handling~%"
+    (when (typep condition 'arithmetic-error) (abort)))
+→
 HANDLE-OTHER-ARITHMETIC-ERRORS
  (define-condition a-condition-with-no-handler (condition) ())
+→
 A-CONDITION-WITH-NO-HANDLER
  (signal 'a-condition-with-no-handler)
+→
 NIL
  (handler-bind ((condition #'handle-division-conditions)
                   (condition #'handle-other-arithmetic-errors))
    (signal 'a-condition-with-no-handler))
@@ -31,9 +66,18 @@
  (handler-bind ((condition #'handle-division-conditions)
                   (condition #'handle-other-arithmetic-errors))
    (signal 'a-condition-with-no-handler))
+▷
 Considering condition for division condition handling
 Considering condition for arithmetic condition handling
+→
 NIL
  (handler-bind ((arithmetic-error #'handle-division-conditions)
                   (arithmetic-error #'handle-other-arithmetic-errors))
    (signal 'arithmetic-error operation '* operands '(1.2 b)))
@@ -37,24 +81,49 @@
  (handler-bind ((arithmetic-error #'handle-division-conditions)
                   (arithmetic-error #'handle-other-arithmetic-errors))
    (signal 'arithmetic-error operation '* operands '(1.2 b)))
+▷
 Considering condition for division condition handling
 Considering condition for arithmetic condition handling
-Back to Lisp Toplevel

-<TT>
+→
+NIL
 Side Effects

 The debugger might be entered due to *break-on-signals*.
 Handlers for the condition being signaled might transfer control.
 Affected By

 Existing handler bindings.
 *break-on-signals*
-Exceptional Situations None.
+Exceptional Situations
+None.

 See Also

-*break-on-signals*, error, simple-condition, Section 9.1.4 (Signaling and Handling Conditions)
### *break-on-signals*, error, simple-condition, Section 9.1.4 (Signaling and Handling Conditions) {\secref\CondSignalHandle}
+Variable *BREAK-ON-SIGNALS*, Function , Condition Type SIMPLE-CONDITION,{\secref\CondSignalHandle}
### Variable *BREAK-ON-SIGNALS*, Function, Condition Type SIMPLE-CONDITION, {\secref\CondSignalHandle}
 Notes

 If (typep datum *break-on-signals*) yields true, the debugger is entered prior to beginning the signaling process. The continue restart can be used to continue with the signaling process. This is also true for all other functions and macros that should, might, or must signal conditions.
\ No newline at end of file
