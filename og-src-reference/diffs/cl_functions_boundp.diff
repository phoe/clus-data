### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:boundp.txt	2017-04-27 21:41:13.000000000 +0100
+++ saved-pages-clus/cl:functions:boundp.txt	2017-04-27 21:41:13.000000000 +0100
@@ -2,1 +4,1 @@
 Syntax


-boundp symbol => generalized-boolean
+ boundp symbol → generalized-boolean

 Arguments and Values

@@ -6,23 +10,80 @@

 Arguments and Values

 symbol - a symbol.
 generalized-boolean - a generalized boolean.
 Description

 Returns true if symbol is bound; otherwise, returns false.
-Examples


- (setq x 1) =>  1
- (boundp 'x) =>  true
- (makunbound 'x) =>  X
- (boundp 'x) =>  false
- (let ((x 2)) (boundp 'x)) =>  false
- (let ((x 2)) (declare (special x)) (boundp 'x)) =>  true
+E*x*amples
### Examples
+;;; TODO condemn toplevel SETQ
+(setq *x* 1)
### (defparameter *x* 1)
+→
+1
+(boundp '*x*)
+→
+true
+(makunbound '*x*)
+→
+*X*
+(boundp '*x*)
+→
+false
+(let ((*x* 2))
+  (boundp '*x*))
+→
+false
+(let ((*x* 2))
+  (declare (special *x*))
+  (boundp '*x*))
+→
+true
+Affected By
+None.

-<TT>
-Affected By None.

 Exceptional Situations

@@ -26,10 +87,24 @@

 Exceptional Situations

 Should signal an error of type type-error if symbol is not a symbol.
 See Also

-set, setq, symbol-value, makunbound
+ Function SET
+ Special Operator SETQ
+ Function SYMBOL-VALUE
+ Function MAKUNBOUND
 Notes

 The function bound determines only whether a symbol has a value in the global environment; any lexical bindings are ignored.
\ No newline at end of file
