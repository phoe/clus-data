### Some changes
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:macros:destructuring-bind.txt	2017-04-27 21:56:14.000000000 +0100
+++ saved-pages-clus/cl:macros:destructuring-bind.txt	2017-04-27 21:56:14.000000000 +0100
@@ -3,4 +4,4 @@
 Syntax


-destructuring-bind lambda-list expression declaration* form* => result*
+ destructuring-bind lambda-list expression declaration* form* result*
### Arrow in CLUS missing

 Arguments and Values

@@ -7,13 +10,13 @@

 Arguments and Values

 lambda-list - a destructuring lambda list.
 expression - a form.
 declaration - a declare expression; not evaluated.
 forms - an implicit progn.
 results - the values returned by the forms.
 Description

 destructuring-bind binds the variables specified in lambda-list to the corresponding values in the tree structure resulting from the evaluation of expression; then destructuring-bind evaluates forms.
-The lambda-list supports destructuring as described in Section 3.4.5 (Destructuring Lambda Lists).
+The lambda-list supports destructuring as described in \secref\DestructuringLambdaLists.
### Should be {\secref\DestructuringLambdaLists}
 Examples


+;;; TODO better examples for this, d-bind really deserves more love
  (defun iota (n) (loop for i from 1 to n collect i))       ;helper
  (destructuring-bind ((a &optional (b 'bee)) one two three)
      `((alpha) ,@(iota 3))
-   (list a b three two one)) =>  (ALPHA BEE 3 2 1)
+  (list a b three two one))
+â†’
+(ALPHA BEE 3 2 1)
+Affected By
+None.

-<TT>
- Affected By None.

 Exceptional Situations

@@ -29,11 +59,23 @@

 Exceptional Situations

 If the result of evaluating the expression does not match the destructuring pattern, an error of type error should be signaled.
 See Also

-macrolet, defmacro
-Notes None.
+ Special Operator MACROLET
+ Macro DEFMACRO
+Notes
+None.


-The following X3J13 cleanup issues, not part of the specification, apply to this section DESTRUCTURING-BINDNEW-MACRO DECLS-AND-DOC
\ No newline at end of file
+\
\ No newline at end of file
