### File look OK, "Notes" mess up
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:assoc-if-not.txt	2017-04-27 22:03:40.000000000 +0100
+++ saved-pages-clus/cl:functions:assoc-if-not.txt	2017-04-27 22:03:40.000000000 +0100
@@ -1,2 +1,1 @@
 Function ASSOC, ASSOC-IF, ASSOC-IF-NOT
-Syntax


-assoc item alist &key key test test-not => entry
+Syntax

+ assoc  item alist &key key test test-not → entry

+ assoc-if  predicate alist &key key → entry

-assoc-if predicate alist &key key => entry
+ assoc-if-not predicate alist &key key → entry

-assoc-if-not predicate alist &key key => entry


 Arguments and Values
@@ -28,30 +44,159 @@



- (setq values '((x . 100) (y . 200) (z . 50))) =>  ((X . 100) (Y . 200) (Z . 50))
- (assoc 'y values) =>  (Y . 200)
- (rplacd (assoc 'y values) 201) =>  (Y . 201)
- (assoc 'y values) =>  (Y . 201)
- (setq alist '((1 . "one")(2 . "two")(3 . "three")))
-=>  ((1 . "one") (2 . "two") (3 . "three"))
- (assoc 2 alist) =>  (2 . "two")
- (assoc-if #'evenp alist) =>  (2 . "two")
- (assoc-if-not #'(lambda(x) (< x 3)) alist) =>  (3 . "three")
- (setq alist '(("one" . 1)("two" . 2))) =>  (("one" . 1) ("two" . 2))
- (assoc "one" alist) =>  NIL
- (assoc "one" alist test #'equalp) =>  ("one" . 1)
- (assoc "two" alist key #'(lambda(x) (char x 2))) =>  NIL
- (assoc #\o alist key #'(lambda(x) (char x 2))) =>  ("two" . 2)
- (assoc 'r '((a . b) (c . d) (r . x) (s . y) (r . z))) =>   (R . X)
- (assoc 'goo '((foo . bar) (zoo . goo))) =>  NIL
- (assoc '2 '((1 a b c) (2 b c d) (-7 x y z))) =>  (2 B C D)
- (setq alist '(("one" . 1) ("2" . 2) ("three" . 3)))
-=>  (("one" . 1) ("2" . 2) ("three" . 3))
- (assoc-if-not #'alpha-char-p alist
-               key #'(lambda (x) (char x 0))) =>  ("2" . 2)
+(defparameter *values* '((x . 100) (y . 200) (z . 50)))
+→
+*VALUES*
+(assoc 'y *values*)
+→
+(Y . 200)
+(rplacd (assoc 'y *values*) 201)
+→
+(Y . 201)
+(assoc 'y *values*)
+→
+(Y . 201)
+(defparameter *alist* '((1 . "one")(2 . "two")(3 . "three")))
+→
+*ALIST*
+(assoc 2 *alist*)
+→
+(2 . "two")
+(assoc-if #'evenp *alist*)
+→
+(2 . "two")
+(assoc-if-not #'(lambda (x) (< x 3)) *alist*)
+→
+(3 . "three")
+(setf *alist* '(("one" . 1)("two" . 2)))
+→
+(("one" . 1) ("two" . 2))
+(assoc "one" *alist*)
+→
+NIL
+(assoc "one" *alist* test #'equalp)
+→
+("one" . 1)
+(assoc "two" *alist* key #'(lambda (x) (char x 2)))
+→
+NIL
+(assoc #\o *alist* key #'(lambda (x) (char x 2)))
+→
+("two" . 2)
+(assoc 'r '((a . b) (c . d) (r . x) (s . y) (r . z)))
+→
+ (R . X)
+(assoc 'goo '((foo . bar) (zoo . goo)))
+→
+NIL
+(assoc '2 '((1 a b c) (2 b c d) (-7 x y z)))
+→
+(2 B C D)
+(setf *alist* '(("one" . 1) ("2" . 2) ("three" . 3)))
+→
+(("one" . 1) ("2" . 2) ("three" . 3))
+(assoc-if-not #'alpha-char-p *alist* key #'(lambda (x) (char x 0)))
+→
+("2" . 2)
+Affected By
+None.

-<TT>
-Affected By None.

 Exceptional Situations

@@ -55,22 +200,65 @@

 Exceptional Situations

 Should be prepared to signal an error of type type-error if alist is not an association list.
 See Also

-rassoc, find, member, position,  Section 3.6 (Traversal Rules and Side Effects)
### rassoc, find, member, position, Section 3.6 {\secref\TraversalRules}
-Notes

- The test-not parameter is deprecated.
- The function assoc-if-not is deprecated.
-It is possible to rplacd the result of assoc, provided that it is not nil, in order to ``update'' alist.
### In CLUS above parts of "Notes" is puted on the end of file, which destroys some logic of text.
+Function RASSOC, Function FIND, Function MEMBER, Function POSITION, {\secref\TraversalRules}
+Example Implementation
+To be done.
### Two above line not find in CLHS.
 The two expressions

  (assoc item list test fn)

-<TT> and
+and

  (find item list test fn key #'car)

-<TT> are equivalent in meaning with one exception if nil appears in alist in place of a pair, and item is nil, find will compute the car of the nil in alist, find that it is equal to item, and return nil, whereas assoc will ignore the nil in alist and continue to search for an actual cons whose car is nil.
-The following X3J13 cleanup issues, not part of the specification, apply to this section TEST-NOT-IF-NOTFLUSH-ALL MAPPING-DESTRUCTIVE-INTERACTIONEXPLICITLY-VAGUE ASSOC-RASSOC-IF-KEY ASSOC-RASSOC-IF-KEYYES
\ No newline at end of file
### Possible formating problem.
+are equivalent in meaning with one exception if nil appears in alist in place of a pair, and item is nil, find will compute the car of the nil in alist, find that it is equal to item, and return nil, whereas assoc will ignore the nil in alist and continue to search for an actual cons whose car is nil.
+Notes
+The test-not parameter is deprecated.
+The function assoc-if-not is deprecated.
+It is possible to rplacd the result of assoc, provided that it is not nil, in order to "update" alist.

+\
\ No newline at end of file
