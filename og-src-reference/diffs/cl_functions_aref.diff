### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:aref.txt	2017-04-27 22:05:50.000000000 +0100
+++ saved-pages-clus/cl:functions:aref.txt	2017-04-27 22:05:50.000000000 +0100
@@ -2,1 +4,1 @@
 Syntax


-aref array &rest subscripts => element
+ aref array &rest subscripts → element

 (setf (aref array &rest subscripts) new-element)

@@ -6,40 +8,147 @@

 (setf (aref array &rest subscripts) new-element)

 Arguments and Values

 array - an array.
  subscripts - a list of valid array indices for the array.
 element, new-element - an object.
 Description

 Accesses the array element specified by the subscripts. If no subscripts are supplied and array is zero rank, aref accesses the sole element of array.
 aref ignores fill pointers. It is permissible to use aref to access any array element, whether active or not.
 Examples

 If the variable foo names a 3-by-5 array, then the first index could be 0, 1, or 2, and then second index could be 0, 1, 2, 3, or 4. The array elements can be referred to by using the function aref; for example, (aref foo 2 1) refers to element (2, 1) of the array.

- (aref (setq alpha (make-array 4)) 3) =>  implementation-dependent
- (setf (aref alpha 3) 'sirens) =>  SIRENS
- (aref alpha 3) =>  SIRENS
- (aref (setq beta (make-array '(2 4)
-                    element-type '(unsigned-byte 2)
+(defparameter *alpha* (make-array 4))
+→
+*ALPHA*
+(aref *alpha* 3)
+→
+implementation-dependent
+(setf (aref *alpha* 3) 'sirens)
+→
+SIRENS
+(aref *alpha* 3)
+→
+SIRENS
+(defparameter *beta*
+  (make-array '(2 4) element-type '(unsigned-byte 2)
                     initial-contents '((0 1 2 3) (3 2 1 0))))
-        1 2) =>  1
- (setq gamma '(0 2))
- (apply #'aref beta gamma) =>  2
- (setf (apply #'aref beta gamma) 3) =>  3
- (apply #'aref beta gamma) =>  3
- (aref beta 0 2) =>  3

-<TT>
-Affected By None.
+→
+*BETA*
+(aref *beta* 1 2)
+→
+1
+(defparameter *gamma* '(0 2))
+→
+*GAMMA*
+(apply #'aref *beta* *gamma*)
+→
+2
+(setf (apply #'aref *beta* *gamma*) 3)
+→
+3
+(apply #'aref *beta *gamma*)
+→
+3
+(aref *beta* 0 2)
+→
+3
+Affected By
+None.
+Exceptional Situations
+None.

-Exceptional Situations None.

 See Also

-bit, char, elt, row-major-aref, svref,  Section 3.2.1 (Compiler Terminology)
### bit, char, elt, row-major-aref, svref,  Section 3.2.1 (Compiler Terminology) {\secref\ConstantModification}
-Notes None.

-The following X3J13 cleanup issues, not part of the specification, apply to this section CONSTANT-MODIFICATIONDISALLOW ARRAY-DIMENSION-LIMIT-IMPLICATIONSALL-FIXNUM
\ No newline at end of file
+Function BIT, Function CHAR, Function ELT, Function ROW-MAJOR-AREF, Function SVREF, {\secref\ConstantModification}
+Notes
+None.
+\
\ No newline at end of file
