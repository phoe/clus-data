### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:special_operators:unwind-protect.txt	2017-04-27 21:55:05.000000000 +0100
+++ saved-pages-clus/cl:special_operators:unwind-protect.txt	2017-04-27 21:55:05.000000000 +0100
@@ -2,7 +4,9 @@
 Syntax


-unwind-protect protected-form cleanup-form* => result*
+ unwind-protect protected-form cleanup-form* → result*

 Arguments and Values

@@ -17,126 +37,168 @@
 Examples


+In the below example, when go is executed, the call to print is executed first, and then the transfer of control to the tag out is completed.
  (tagbody
    (let ((x 3))
      (unwind-protect
-       (if (numberp x) (go out))
+         (when (numberp x) (go out))
        (print x)))
   out
    ...)

-<TT> When go is executed, the call to print is executed first, and then the transfer of control to the tag out is completed.
+(defvar *state*)
+→
+*STATE*

  (defun dummy-function (x)
-    (setq state 'running)
-    (unless (numberp x) (throw 'abort 'not-a-number))
-    (setq state (1+ x))) =>  DUMMY-FUNCTION
- (catch 'abort (dummy-function 1)) =>  2
- state =>  2
- (catch 'abort (dummy-function 'trash)) =>  NOT-A-NUMBER
- state =>  RUNNING
- (catch 'abort (unwind-protect (dummy-function 'trash)
-                  (setq state 'aborted))) =>  NOT-A-NUMBER
- state =>  ABORTED
+  (setf *state* 'running)
+  (unless (numberp x)
+    (throw 'abort 'not-a-number))
+  (setf *state* (1+ x)))
+→
+DUMMY-FUNCTION
+(catch 'abort (dummy-function 1))
+→
+2
+*state*
+→
+2
+(catch 'abort (dummy-function 'trash))
+→
+NOT-A-NUMBER
+*state*
+→
+RUNNING
+(catch 'abort
+  (unwind-protect
+      (dummy-function 'trash)
+    (setf *state* 'aborted)))
+→
+NOT-A-NUMBER
+*state*
+→
+ABORTED

-<TT>
 The following code is not correct

  (unwind-protect
-   (progn (incf *access-count*)
+    (incf *access-count*)
           (perform-access))
    (decf *access-count*))

-<TT> If an exit occurs before completion of incf, the decf form is executed anyway, resulting in an incorrect value for *access-count*. The correct way to code this is as follows
+If an exit occurs before completion of incf, the decf form is executed anyway, resulting in an incorrect value for *access-count*. The correct way to code this is as follows

  (let ((old-count *access-count*))
    (unwind-protect
-     (progn (incf *access-count*)
+    (progn
+      (incf *access-count*)
             (perform-access))
-     (setq *access-count* old-count)))
+    (setf *access-count* old-count)))

-<TT>


-;;; The following returns 2.
  (block nil
-   (unwind-protect (return 1)
+  (unwind-protect
+      (return 1)
      (return 2)))

-;;; The following has undefined consequences.
+→
+2
  (block a
    (block b
-     (unwind-protect (return-from a 1)
+    (unwind-protect
+        (return-from a 1)
        (return-from b 2))))

-;;; The following returns 2.
+?
+This has undefined consequences.
  (catch nil
-   (unwind-protect (throw nil 1)
+  (unwind-protect
+      (throw nil 1)
      (throw nil 2)))

-;;; The following has undefined consequences because the catch of B is
-;;; passed over by the first THROW, hence portable programs must assume
-;;; its dynamic extent is terminated.  The binding of the catch tag is not
-;;; yet disestablished and therefore it is the target of the second throw.
+→
+2
+The following has undefined consequences because the catch of b is passed over by the first throw, hence portable programs must assume its dynamic extent is terminated. The binding of the catch tag is not yet disestablished and therefore it is the target of the second throw.
  (catch 'a
    (catch 'b
-     (unwind-protect (throw 'a 1)
+    (unwind-protect
+      (throw 'a 1)
        (throw 'b 2))))

-;;; The following prints "The inner catch returns SECOND-THROW"
-;;; and then returns OUTER-CATCH.
  (catch 'foo
          (format t "The inner catch returns ~s.~%"
                  (catch 'foo
-                     (unwind-protect (throw 'foo first-throw)
+      (unwind-protect
+          (throw 'foo first-throw)
                          (throw 'foo second-throw))))
          outer-catch)

+▷
+The inner catch returns SECOND-THROW
+→
+OUTER-CATCH
+In the following example, the inner catch of a is passed over, but because that catch is disestablished before the throw to a is executed, it isn't seen.

-;;; The following returns 10. The inner CATCH of A is passed over, but
-;;; because that CATCH is disestablished before the THROW to A is executed,
-;;; it isn't seen.
  (catch 'a
    (catch 'b
-     (unwind-protect (1+ (catch 'a (throw 'b 1)))
+    (unwind-protect
+        (1+ (catch 'a (throw 'b 1)))
        (throw 'a 10))))

+→
+10
+The following has undefined consequences because the extent of the (catch 'bar ...) exit ends when the (throw 'foo ...) commences.

-;;; The following has undefined consequences because the extent of
-;;; the (CATCH 'BAR ...) exit ends when the (THROW 'FOO ...)
-;;; commences.
  (catch 'foo
    (catch 'bar
-       (unwind-protect (throw 'foo 3)
+    (unwind-protect
+        (throw 'foo 3)
          (throw 'bar 4)
          (print 'xxx))))

+?
+This has undefined consequences.
+In the following example, the (throw 'foo ...) has no effect on the scope of the bar catch tag or the extent of the (catch 'bar ...) exit.

-;;; The following returns 4; XXX is not printed.
-;;; The (THROW 'FOO ...) has no effect on the scope of the BAR
-;;; catch tag or the extent of the (CATCH 'BAR ...) exit.
  (catch 'bar
    (catch 'foo
-       (unwind-protect (throw 'foo 3)
+    (unwind-protect
+        (throw 'foo 3)
          (throw 'bar 4)
          (print 'xxx))))

+→
+4

-;;; The following prints 5.
  (block nil
    (let ((x 5))
      (declare (special x))
-     (unwind-protect (return)
+    (unwind-protect
+        (return)
        (print x))))

-<TT>
- Affected By None.
+▷
+5
+→
+NIL
+Affected By
+None.
+Exceptional Situations
+None.

-Exceptional Situations None.

 See Also

-catch, go, handler-case, restart-case, return, return-from, throw, Section 3.1 (Evaluation)
### catch, go, handler-case, restart-case, return, return-from, throw, Section 3.1 (Evaluation) {\secref\Evaluation}
-Notes None.

-The following X3J13 cleanup issues, not part of the specification, apply to this section EXIT-EXTENTMINIMAL EXIT-EXTENT-AND-CONDITION-SYSTEMLIKE-DYNAMIC-BINDINGS
\ No newline at end of file
+ Special Operator CATCH
+ Special Operator GO
+ Macro HANDLER-CASE
+ Macro RESTART-CASE
+ Macro RETURN
+ Special Operator RETURN-FROM
+ Special Operator THROW
+ {\secref\Evaluation}
+Notes
+None.
+\
\ No newline at end of file
