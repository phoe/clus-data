### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:macros:shiftf.txt	2017-04-27 21:55:45.000000000 +0100
+++ saved-pages-clus/cl:macros:shiftf.txt	2017-04-27 21:55:45.000000000 +0100
@@ -2,7 +4,9 @@
 Syntax


-shiftf place+ newvalue => old-value-1
+ shiftf place+ newvalue → old-value-1

 Arguments and Values

@@ -6,39 +10,70 @@

 Arguments and Values

 place - a place.
 newvalue - a form; evaluated.
 old-value-1 - an object (the old value of the first place).
 Description

 shiftf modifies the values of each place by storing newvalue into the last place, and shifting the values of the second through the last place into the remaining places.
  If newvalue produces more values than there are store variables, the extra values are ignored. If newvalue produces fewer values than there are store variables, the missing values are set to nil.
 In the form (shiftf place1 place2 ... placen newvalue), the values in place1 through placen are read and saved, and newvalue is evaluated, for a total of n+1 values in all. Values 2 through n+1 are then stored into place1 through placen, respectively. It is as if all the places form a shift register; the newvalue is shifted in from the right, all values shift over to the left one place, and the value shifted out of place1 is returned.
- For information about the evaluation of subforms of places, see Section 5.1.1.1 (Evaluation of Subforms to Places).
+For information about the evaluation of subforms of places, see section {\secref\GenRefSubFormEval}.
### Section 5.1.1.1 (Evaluation of Subforms to Places) {\secref\GenRefSubFormEval}
 Examples


- (setq x (list 1 2 3) y 'trash) =>  TRASH
- (shiftf y x (cdr x) '(hi there)) =>  TRASH
- x =>  (2 3)
- y =>  (1 HI THERE)
- (setq x (list 'a 'b 'c)) =>  (A B C)
- (shiftf (cadr x) 'z) =>  B
- x =>  (A Z C)
- (shiftf (cadr x) (cddr x) 'q) =>  Z
- x =>  (A (C) . Q)
- (setq n 0) =>  0
- (setq x (list 'a 'b 'c 'd)) =>  (A B C D)
- (shiftf (nth (setq n (+ n 1)) x) 'z) =>  B
- x =>  (A Z C D)

-<TT>
+(defparameter *x* (list 1 2 3))
+→
+*X*
+(defparameter *y* 'trash)
+→
+*Y*
+(shiftf *y* *x* (cdr *x*) '(hi there))
+→
+TRASH
+*x*
+→
+(2 3)
+*y*
+→
+(1 HI THERE)
+(setf *x* (list 'a 'b 'c))
+→
+(A B C)
+(shiftf (cadr *x*) 'z)
+→
+B
+*x*
+→
+(A Z C)
+(shiftf (cadr *x*) (cddr *x*) 'q)
+→
+Z
+*x*
+→
+(A (C) . Q)
+(defparameter *n* 0)
+→
+*N*
+(setf *x* (list 'a 'b 'c 'd))
+→
+(A B C D)
+(shiftf (nth (incf *n*) *x*) 'z)
+→
+B
+*x*
+→
+(A Z C D)
 Affected By

 define-setf-expander, defsetf, *macroexpand-hook*
-Exceptional Situations None.
+Exceptional Situations
+None.

 See Also

-setf, rotatef, Section 5.1 (Generalized Reference)
+ Macro SETF
+ Macro ROTATEF
+ {\secref\GeneralizedReference}
### Section 5.1 (Generalized Reference) {\secref\GeneralizedReference}
 Notes

 The effect of (shiftf place1 place2 ... placen newvalue) is roughly equivalent to

  (let ((var1 place1)
        (var2 place2)
        ...
@@ -57,13 +191,44 @@
    (setf placen var0)
    var1)

-<TT> except that the latter would evaluate any subforms of each place twice, whereas shiftf evaluates them once. For example,

- (setq n 0) =>  0
- (setq x (list 'a 'b 'c 'd)) =>  (A B C D)
- (prog1 (nth (setq n (+ n 1)) x)
-        (setf (nth (setq n (+ n 1)) x) 'z)) =>  B
- x =>  (A B Z D)

-<TT>
-The following X3J13 cleanup issues, not part of the specification, apply to this section PUSH-EVALUATION-ORDERFIRST-ITEM SETF-MULTIPLE-STORE-VARIABLESALLOW
\ No newline at end of file
+except that the latter would evaluate any subforms of each place twice, whereas shiftf evaluates them once. For example,
+(defparameter *n* 0)
+→
+0
+(defparameter *x* (list 'a 'b 'c 'd))
+→
+(A B C D)
+(prog1
+  (nth (incf *n*) *x*)
+  (setf (nth (incf *n*) *x*) 'z))
+→
+B
+*x*
+→
+(A B Z D)
+\
\ No newline at end of file
