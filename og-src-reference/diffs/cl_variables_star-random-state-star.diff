### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:variables:star-random-state-star.txt	2017-04-27 21:49:25.000000000 +0100
+++ saved-pages-clus/cl:variables:star-random-state-star.txt	2017-04-27 21:49:25.000000000 +0100
@@ -11,29 +22,64 @@
 Examples


- (random-state-p *random-state*) =>  true
- (setq snap-shot (make-random-state))
- ;; The series from any given point is random,
- ;; but if you backtrack to that point, you get the same series.
+(random-state-p *random-state*)
+→
+true
+In the example below, the series from any given point is random, but if you backtrack to that point, you get the same series.
+(defparameter *snapshot* (make-random-state))
+→
+*SNAPSHOT*
  (list (loop for i from 1 to 10 collect (random))
-       (let ((*random-state* snap-shot))
+      (let ((*random-state* *snapshot*))
          (loop for i from 1 to 10 collect (random)))
        (loop for i from 1 to 10 collect (random))
-       (let ((*random-state* snap-shot))
+      (let ((*random-state* *snapshot*))
          (loop for i from 1 to 10 collect (random))))
-=>  ((19 16 44 19 96 15 76 96 13 61)
+→
+((19 16 44 19 96 15 76 96 13 61)
     (19 16 44 19 96 15 76 96 13 61)
     (16 67 0 43 70 79 58 5 63 50)
     (16 67 0 43 70 79 58 5 63 50))

-<TT>
 Affected By

 The implementation.
 random.
 See Also

-make-random-state, random, random-state
+ Function MAKE-RANDOM-STATE
+ Function RANDOM
+ Type RANDOM-STATE
 Notes

 Binding *random-state* to a different random state object correctly saves and restores the old random state object.
\ No newline at end of file
