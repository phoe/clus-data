### File look OK
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:special_operators:progn.txt	2017-04-27 21:55:17.000000000 +0100
+++ saved-pages-clus/cl:special_operators:progn.txt	2017-04-27 21:55:17.000000000 +0100
@@ -2,7 +4,9 @@
 Syntax


-progn form* => result*
+ progn form* → result*

 Arguments and Values

@@ -16,23 +32,85 @@
 Examples


- (progn) =>  NIL
- (progn 1 2 3) =>  3
- (progn (values 1 2 3)) =>  1, 2, 3
- (setq a 1) =>  1
- (if a
-      (progn (setq a nil) 'here)
-      (progn (setq a t) 'there)) =>  HERE
- a =>  NIL

-<TT>
-Affected By None.
+(progn)
+→
+NIL
+(progn 1 2 3)
+→
+3
+(progn (values 1 2 3))
+→
+1
+2
+3
+(defparameter *a* 1)
+→
+1
+(if *a*
+    (progn (setf *a* nil)
+           'here)
+    (progn (setf *a* t)
+           'there))
+→
+HERE
+*a*
+→
+NIL
+Affected By
+None.
+Exceptional Situations
+None.

-Exceptional Situations None.

 See Also

-prog1, prog2, Section 3.1 (Evaluation)
+ Macro PROG1
+ Macro PROG2
+ {\secref\Evaluation}
### prog1, prog2, Section 3.1 {\secref\Evaluation}
 Notes

-Many places in Common Lisp involve syntax that uses implicit progns. That is, part of their syntax allows many forms to be written that are to be evaluated sequentially, discarding the results of all forms but the last and returning the results of the last form. Such places include, but are not limited to, the following the body of a lambda expression; the bodies of various control and conditional forms (e.g., case, catch, progn, and when).
\ No newline at end of file
### Possible formating problem
+Many places in Common Lisp involve syntax that uses implicit progns. That is, part of their syntax allows many forms to be written that are to be evaluated sequentially, discarding the results of all forms but the last and returning the results of the last form. Such places include, but are not limited to, the following the body of a lambda expression; the bodies of various control and conditional forms (e.g. case, catch, progn, and when).
\ No newline at end of file
