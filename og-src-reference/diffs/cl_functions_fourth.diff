### Same "cl:functions:first.diff"
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:fourth.txt	2017-04-27 22:02:29.000000000 +0100
+++ saved-pages-clus/cl:functions:fourth.txt	2017-04-27 22:02:29.000000000 +0100
@@ -1,46 +1,46 @@
-Accessor FIRST, SECOND, THIRD, FOURTH, FIFTH, SIXTH, SEVENTH, EIGHTH, NINTH, TENTH
+Accessor FIRST, ..., TENTH
 Syntax


-first list => object
+ first list → object
+ second list → object

-second list => object
+ third list → object

-third list => object
+ fourth list → object

-fourth list => object
+ fifth list → object

-fifth list => object
+ sixth list → object

-sixth list => object
+ seventh list → object

-seventh list => object
+ eighth list → object

-eighth list => object
+ ninth list → object

-ninth list => object
+ tenth list → object

-tenth list => object
+ (setf (first object) new-object)

-(setf (first list) new-object)
+ (setf (second object) new-object)

-(setf (second list) new-object)
+ (setf (third object) new-object)

-(setf (third list) new-object)
+ (setf (fourth object) new-object)

-(setf (fourth list) new-object)
+ (setf (fifth object) new-object)

-(setf (fifth list) new-object)
+ (setf (sixth object) new-object)

-(setf (sixth list) new-object)
+ (setf (seventh object) new-object)

-(setf (seventh list) new-object)
+ (setf (eighth object) new-object)

-(setf (eighth list) new-object)
+ (setf (ninth object) new-object)
+ (setf (tenth object) new-object)

-(setf (ninth list) new-object)

-(setf (tenth list) new-object)

 Arguments and Values

@@ -44,57 +48,159 @@

 Arguments and Values

 list - a list,  which might be a dotted list or a circular list.
 object, new-object - an object.
 Description

-The functions first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, and tenth access the first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, and tenth elements of list, respectively. Specifically,

- (first list)    ==   (car list)
- (second list)   ==   (car (cdr list))
- (third list)    ==   (car (cddr list))
- (fourth list)   ==   (car (cdddr list))
- (fifth list)    ==   (car (cddddr list))
- (sixth list)    ==   (car (cdr (cddddr list)))
- (seventh list)  ==   (car (cddr (cddddr list)))
- (eighth list)   ==   (car (cdddr (cddddr list)))
- (ninth list)    ==   (car (cddddr (cddddr list)))
- (tenth list)    ==   (car (cdr (cddddr (cddddr list))))
+The functions first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, and tenth access the first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, and tenth elements of list, respectively.
+Specifically,
+(first list)   ≡  (car list)
+(second list)  ≡  (car (cdr list))
+(third list)   ≡  (car (cddr list))
+(fourth list)  ≡  (car (cdddr list))
+(fifth list)   ≡  (car (cddddr list))
+(sixth list)   ≡  (car (cdr (cddddr list)))
+(seventh list) ≡  (car (cddr (cddddr list)))
+(eighth list)  ≡  (car (cdddr (cddddr list)))
+(ninth list)   ≡  (car (cddddr (cddddr list)))
+(tenth list)   ≡  (car (cdr (cddddr (cddddr list))))

-<TT>
 setf can also be used with any of these functions to change an existing component. The same equivalences apply. For example

- (setf (fifth list) new-object) ==  (setf (car (cddddr list)) new-object)

-<TT>
+(setf (fifth list) new-object) ≡ (setf (car (cddddr list)) new-object)
 Examples


- (setq lst '(1 2 3 (4 5 6) ((V)) vi 7 8 9 10))
-=>  (1 2 3 (4 5 6) ((V)) VI 7 8 9 10)
- (first lst) =>  1
- (tenth lst) =>  10
- (fifth lst) =>  ((V))
- (second (fourth lst)) =>  5
- (sixth '(1 2 3)) =>  NIL
- (setf (fourth lst) "four") =>  "four"
- lst =>  (1 2 3 "four" ((V)) VI 7 8 9 10)

-<TT>
-Side Effects None.
+(defparameter *list* '(1 2 3 (4 5 6) ((V)) vi 7 8 9 10))
+→
+*LIST*
+*list*
+→
+(1 2 3 (4 5 6) ((V)) VI 7 8 9 10)
+(first *list*)
+→
+1
+(tenth *list*)
+→
+10
+(fifth *list*)
+→
+((V))

-Affected By None.
+(second (fourth *list*))
+→
+5
+(sixth '(1 2 3))
+→
+NIL
+(setf (fourth *list*) "four")
+→
+"four"
+*list*
+→
+(1 2 3 "four" ((V)) VI 7 8 9 10)
+Side Effects
+None.
+Affected By
+None.
+Exceptional Situations
+None.

-Exceptional Situations None.

 See Also

-car, nth
-Notes
+Function CAR, Function NTH
+Example Implementation

 first is functionally equivalent to car, second is functionally equivalent to cadr, third is functionally equivalent to caddr, and fourth is functionally equivalent to cadddr.
+Notes
 The ordinal numbering used here is one-origin, as opposed to the zero-origin numbering used by nth

- (fifth x) ==  (nth 4 x)

-<TT>
\ No newline at end of file
+ (fifth x) ≡ (nth 4 x)
+\
\ No newline at end of file
