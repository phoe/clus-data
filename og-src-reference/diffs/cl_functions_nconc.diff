### Core text put to "Examples", check yet again
### +++ CLUS
### --- CLHS

--- saved-pages-dpans3/cl:functions:nconc.txt	2017-04-27 22:01:54.000000000 +0100
+++ saved-pages-clus/cl:functions:nconc.txt	2017-04-27 22:01:55.000000000 +0100
@@ -2,1 +4,1 @@
 Syntax


-nconc &rest lists => concatenated-list
+ nconc &rest lists → concatenated-list

 Arguments and Values

@@ -6,48 +10,193 @@

 Arguments and Values

  list - each but the last must be a list (which might be a dotted list but must not be a circular list); the last list may be any object.
 concatenated-list - a list.
 Description

 Returns a list that is the concatenation of lists. If no lists are supplied, (nconc) returns nil.  nconc is defined using the following recursive relationship

- (nconc) =>  ()
- (nconc nil . lists) ==  (nconc . lists)
- (nconc list) =>  list
- (nconc list-1 list-2) ==  (progn (rplacd (last list-1) list-2) list-1)
- (nconc list-1 list-2 . lists) ==  (nconc (nconc list-1 list-2) . lists)

-<TT>
+(apply #'nconc nil lists) ≡ (apply #'nconc lists)
+(nconc list-1 list-2) ≡ (progn (rplacd (last list-1) list-2) list-1)
+(apply #'nconc list-1 list-2 lists) ≡ (apply #'nconc (nconc list-1 list-2) lists)
 Examples


- (nconc) =>  NIL
- (setq x '(a b c)) =>  (A B C)
- (setq y '(d e f)) =>  (D E F)
- (nconc x y) =>  (A B C D E F)
- x =>  (A B C D E F)
-<TT> Note, in the example, that the value of x is now different, since its last cons has been rplacd'd to the value of y. If (nconc x y) were evaluated again, it would yield a piece of a circular list, whose printed representation would be (A B C D E F D E F D E F ...), repeating forever; if the *print-circle* switch were non-nil, it would be printed as (A B C . #1=(D E F . #1#)).
-
- (setq foo (list 'a 'b 'c 'd 'e)
-       bar (list 'f 'g 'h 'i 'j)
-       baz (list 'k 'l 'm)) =>  (K L M)
- (setq foo (nconc foo bar baz)) =>  (A B C D E F G H I J K L M)
- foo =>  (A B C D E F G H I J K L M)
- bar =>  (F G H I J K L M)
- baz =>  (K L M)
- (setq foo (list 'a 'b 'c 'd 'e)
-       bar (list 'f 'g 'h 'i 'j)
-       baz (list 'k 'l 'm)) =>  (K L M)
- (setq foo (nconc nil foo bar nil baz)) =>  (A B C D E F G H I J K L M)
- foo =>  (A B C D E F G H I J K L M)
- bar =>  (F G H I J K L M)
- baz =>  (K L M)

-<TT>
+(nconc)
+→
+NIL
+(nconc (list 'foo 'bar 'baz)))
+→
+(FOO BAR BAZ)
+(defparameter *x* '(a b c))
+→
+(A B C)
+(defparameter *y* '(d e f))
+→
+(D E F)
+(nconc *x* *y*)
+→
+(A B C D E F)
+*x*
+→
+(A B C D E F)
+Note, in the example, that the value of *x* is now different, since its last cons has been rplacd'd to the value of *y*. If (nconc *x* *y*) were evaluated again, it would yield a piece of a circular list, whose printed representation would be (A B C D E F D E F D E F ...), repeating forever; if the *print-circle* switch were non-nil, it would be printed as (A B C . #1=(D E F . #1#)).
+(defparameter *foo* (list 'a 'b 'c 'd 'e))
+→
+*FOO*
+(defparameter *bar* (list 'f 'g 'h 'i 'j))
+→
+*BAR*
+(defparameter *baz* (list 'k 'l 'm))
+→
+*BAZ*
+(setf *foo* (nconc *foo* *bar* *baz*))
+→
+(A B C D E F G H I J K L M)
+*foo*
+→
+(A B C D E F G H I J K L M)
+*bar*
+→
+(F G H I J K L M)
+*baz*
+→
+(K L M)
+(setf *foo* (list 'a 'b 'c 'd 'e)
+→
+(A B D C E)
+(setf *bar* (list 'f 'g 'h 'i 'j))
+→
+(F G H I J)
+(setf *baz* (list 'k 'l 'm))
+→
+(K L M)
+(setf *foo* (nconc nil *foo* *bar* nil *baz*))
+→
+(A B C D E F G H I J K L M)
+*foo*
+→
+(A B C D E F G H I J K L M)
+*bar*
+→
+(F G H I J K L M)
+*baz*
+→
+(K L M)

 Side Effects

@@ -51,14 +200,38 @@

 Side Effects

 The lists are modified rather than copied.
-Affected By None.

-Exceptional Situations None.
+Affected By
+None.
+Exceptional Situations
+None.

 See Also

-append, concatenate
-Notes None.

-The following X3J13 cleanup issues, not part of the specification, apply to this section REMF-DESTRUCTION-UNSPECIFIEDX3J13-MAR-89 DOTTED-LIST-ARGUMENTSCLARIFY
\ No newline at end of file
+Function APPEND, Function CONCATENATE
+Example Implementation
+To be done.
+Notes
+None.
+\
\ No newline at end of file
